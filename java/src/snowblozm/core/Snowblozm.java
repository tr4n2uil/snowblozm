package snowblozm.core;import org.json.JSONObject;import org.json.JSONArray;import java.io.PrintStream;import java.util.Iterator;import snowblozm.interfaces.Service;import snowblozm.interfaces.Block;import snowblozm.interfaces.Sequence;import snowblozm.remote.RemoteServiceWorkflow;/** *	@project Snowblozm *	@desc Java Service Computing Platform Kernel * *	@class Snowblozm *	@desc Provides Registry and Kernel functionalities * *	@author Vibhaj Rajan <vibhaj8@gmail.com> * *	@functionalities *					Central class for management purposes *					Manages ServiceProvider configurations *					Manages Initialization configurations *					Manages loading of Services and Workflows * *	@format 	request = { *						user : (email of key to use for crypt), *						challenge : (used to generate key for decrypting message), *						message : (all request values as array/object within this encrypted message), *						hash : (hash of message) *					} * *	@format	response = { *						valid : (valid execution flag), *						msg : (service execution message), *						status : (status code), *						details : (service execution details), *						message : (all response values as array/object within this encrypted message), *						hash : (hash of message) *					} * *	@format	message = { *						service : (service URI (root.service.operation)), *						... params ... *					} *	 * **/public class Snowblozm {		/** 	 *	@static sparray block ServiceProvider configurations	**/	private static JSONObject sparray = new JSONObject();		/** 	 *	@static initarray block Initialization configurations	**/	private static JSONObject initarray = new JSONObject();		/** 	 *	@static debug boolean Debug flag	**/	public static boolean debug = false;		/** 	 *	@static setmime string Set response MIME type	**/	public static boolean setmime = false;		/** 	 *	@static out PrintStream Snowblozm output writer	**/	public static PrintStream out = System.out;		/** 	 *	@method add	 *	@desc Adds a service provider configuration	 *	 *	@param spname string ServiceProvider name	 *	@param spconf array (root, location, type, map, key)	 *	**/	public static void add(String spname, Block spconf) throws SBException {		sparray.put(spname, spconf);	}		/** 	 *	@method init	 *	@desc Adds an initialization configuration	 *	 *	@param initname string Initialization name	 *	@param initconf array 	 *	**/	public static void init(String initname, Block initconf) throws SBException {		initarray.put(initname, initconf);	}		/** 	 *	@method get	 *	@desc Gets an initialization configuration if exists	 *	 *	@param initname string Initialization name	 *	 *	@return initconf array 	 *	**/	public static Block get(String initname) throws SBException {		if(initarray.isNull(initname)){			out.println("Initialization configuration not found for key : " + initname);			System.exit(0);		}				return initarray.getBlock(initname);	}		/** 	 *	@method load	 *	@desc Loads local and remote services and workflows transparently	 *	 *	@param uri string Service / Workflow URI (sproot.service.operation.stype) (stype = service|workflow)	 *	**/	public static Service load(String uri) throws SBException {		String tokens[] = uri.split(".");		String sproot = tokens[0];		String service = tokens[1];		String operation = tokens[2];		String stype = tokens[3];				if(sparray.isNull(sproot)){			out.println("Unable to identify Service Provider");			System.exit(0);		}				Block sp = sparray.getBlock(sproot);		String root = sp.getString("root");		String location = sp.getString("location");				if(location.equalsIgnoreCase("local")){			String path = root + service + '/';			try {					Class svclass = Class.forName(snowblozm.util.String.ucfirst(service) + snowblozm.util.String.ucfirst(operation) + snowblozm.util.String.ucfirst(stype));				return (Service)svclass.newInstance();			} catch(Exception e){				throw new SBException("Exception Occured : " + e.getMessage());			}		}		else if(location.equalsIgnoreCase("remote")){			String type = sp.getString("type");			String key = sp.getString("key");			String map = sp.getString("map");			return new RemoteServiceWorkflow(map+"."+service+"."+operation+"."+type, root, key);		}		else {			out.println("Unable to identify Service Provider location");			System.exit(0);		}				return null;	}		/** 	 *	@method execute	 *	@desc Runs a workflow by using its definition array	 *				workflow [{	 *					service => ...,	 *					input => ...,	 *					output => ...,	 *					strict => ...,	 *					... message params ...	 *				}]	 *	 *	@param workflow Workflow definition block array	 *	@param memory object optional default block	 *	 *	@return memory object	 *	**/	public static Block execute(Block[] workflow, Block memory) throws SBException {		if(memory == null)			memory = new JSONObject();					if(memory.isNull("valid")) 			memory.put("valid", true);				for(Block message : workflow){			/**			 *	Check for strictness			**/			boolean strict = message.isNull("strict") ? true : message.getBoolean("strict");						/**			 *	Continue on invalid state if strict			**/			if(!memory.getBoolean("valid") && strict)				continue;						/**			 *	Run the service with the message and memory			**/			memory = run(message, memory);		}				/**		 *	Return memory		**/		return memory;	}		/** 	 *	@method run	 *	@desc Runs a service by using its definition message object	 *				service {	 *					service => ...,	 *					input => ...,	 *					output => ...,	 *					strict => ...,	 *					... params ...	 *				}	 *	 *	@param $message Service definition message	 *	@param $memory object optional default array('valid' => true)	 *	 *	@return $memory object	 *	**/	public static Block run(Block message, Block memory) throws SBException {		if(memory == null)			memory = new JSONObject();					if(memory.isNull("valid")) 			memory.put("valid", true);					String[] deflt = new String[] {"valid", "msg", "status", "details"};				/**		 *	Read the service uri and load an instance		**/		Service service = null;		try {			service = load(message.getString("service"));		} catch(Exception e){			throw new SBException("Exception Occured : " + e.getMessage());		}				/**		 *	Read the service arguments		**/		if(message.isNull("args"))			message.put("args", new JSONArray());		Sequence args = message.getSequence("args");				/**		 *	Copy arguments if necessary		**/		int length = args.length();		for(int i=0; i<length; i++){			String key = (String)args.get(i);			if(message.isNull(key)){				message.put(key, memory.isNull(key) ? false : memory.get(key));			}		}				/**		 *	Read the service input		**/		Block input = message.isNull("input") ? new JSONObject() : message.getBlock("input");		Block sin = service.input();		Block sinreq = sin.isNull("required") ? new JSONObject() : sin.getBlock("required");		Block sinopt = sin.isNull("optional") ? new JSONObject() : sin.getBlock("optional");				/**		 *	Copy required input if not exists		**/		Iterator it = sinreq.keys();		while(it.hasNext()){			String key = (String) it.next();			if(message.isNull(key)){				String param = input.isNull(key) ? key : input.getString(key);				if(memory.isNull(param)){						if(key.equalsIgnoreCase("keyid")){						memory.put("msg", "Session Expired. Please Login.");						memory.put("status", 407);						memory.put("details", "Value not found for "+key+" @"+message.getString("service"));					}					else {						memory.put("msg", "Invalid Service Input Parameters");						memory.put("status", 500);						memory.put("details", "Value not found for "+key+" @"+message.getString("service"));					}					memory.put("valid", false);					return memory;				}				message.put(key, memory.get(param));			}		}				/**		 *	Copy optional input if not exists		**/		it = sinopt.keys();		while(it.hasNext()){			String key = (String) it.next();			String value = sinopt.getString(key);			if(message.isNull(key)){				String param = input.isNull(key) ? key : input.getString(key);				if(memory.isNull(param)){						message.put(key, value);					continue;				}				message.put(key, memory.get(param));			}		}				/**		 *	@debug		**/		if(debug){			out.println("IN "+message.toString()+"<br /><br />\n\n");		}					/**		 *	Run the service with the message as memory		**/		message = service.run(message);				/**		 *	@debug		**/		if(debug){			out.println("OUT "+message.toString()+"<br /><br />\n\n");		}				/**		 *	Read the service output		**/		Block output = (!message.isNull("output") && message.getBoolean("valid")) ? message.getBlock("output") : new JSONObject();		Sequence sout = service.output();		length = sout.length();				/**		 *	Copy default output and return if not valid		**/		memory.put("valid", message.getBoolean("valid"));		if(!memory.getBoolean("valid")){			for(int i=0; i<length; i++){				String key = (String) sout.get(i);				if(!message.isNull(key)){					memory.put(key, message.get(key));				}			}			return memory;		}				/**		 *	Copy default output if not exists		**/		for(int i=0; i<length; i++){			String key = (String) sout.get(i);			if(memory.isNull(key) && !message.isNull(key)){				memory.put(key, message.get(key));			}		}		/**		 *	Copy output		**/		for(int i=0; i<length; i++){			String key = (String) sout.get(i);			String param = output.isNull(key) ? key : output.getString(key);			if(message.isNull(key)){				memory.put("msg", "Invalid Service Output Parameters");				memory.put("status", 501);				memory.put("details", "Value not found for "+key+" @"+message.getString("service"));				return memory;			}			memory.put(param, message.get(key));		}				/**		 *	@debug		**/		if(debug){			out.println("MEMORY "+memory.toString()+"<br /><br />\n\n");		}				/**		 *	Return the memory		**/		return memory;	}	}