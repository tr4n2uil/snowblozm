package snowblozm.core;//import aquadew.proxy.RemoteWorkflow;/** *	@class Snowblozm *	@desc Manages ServiceProvider mappings and helps in loading services and workflows * *	@author Vibhaj Rajan <vibhaj8@gmail.com> * **/public class Snowblozm {	/** 	 *	@static sparray block ServiceProvider Configuration array	**/	private static Block sparray = new Block();		/** 	 *	@method add	 *	@desc Adds a service provider definition array	 *	 *	@param spname string ServiceProvider name	 *	@param spdef block (root, location, type, map, key)	 *	**/	public static void add(String spname, Block spdef){		sparray.set(spname, spdef);		return;	}		/** 	 *	@method load	 *	@desc Loads local and remote services and workflows transparently	 *	 *	@param uri string Service / Workflow URI (sproot.service.operation.stype) (stype = service|workflow)	 *	**/	public static void load(String uri){		String tokens[] = $uri.split(".");		String sproot = tokens[0];		String service = tokens[1];		String operation = tokens[2];		String stype = tokens[3];				if(sparray.isset(sproot)){			System.out.println("Unable to identify Service Provider");			System.exit(0);		}				Block sp = sparray.getBlock(sproot);		String root = sp.getString("root");		String location = sp.getString("location");				if(location.equalsIngnoreCase("local")){			String path = root + service + '/';			Class svclass = Class.forName(core.util.String.ucfirst(service) + core.util.String.ucfirst(operation) + core.util.String.ucfirst(stype));			return svclass.newInstance();		}		else if(location.equalsIqnoreCase("remote")){			String type = sp.getString("type");			String key = sp.getString("key");			String map = sp.getString("map");			return new RemoteWorkflow(map+"."+service+"."+operation+"."+type, root, key);		}		else {			System.out.println("Unable to identify Service Provider location");			System.exit(0);		}	}	}